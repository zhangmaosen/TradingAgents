from typing import Annotated, Sequence
from datetime import date, timedelta, datetime
from typing_extensions import TypedDict, Optional
from langchain_openai import ChatOpenAI
from tradingagents.agents import *
from langgraph.prebuilt import ToolNode
from langgraph.graph import END, StateGraph, START, MessagesState


# Researcher team state
class InvestDebateState(TypedDict):
    bull_history: Annotated[
        str, "Bullish Conversation history"
    ]  # Bullish Conversation history
    bear_history: Annotated[
        str, "Bearish Conversation history"
    ]  # Bullish Conversation history
    history: Annotated[str, "Conversation history"]  # Conversation history
    current_response: Annotated[str, "Latest response"]  # Last response
    judge_decision: Annotated[str, "Final judge decision"]  # Last response
    count: Annotated[int, "Length of the current conversation"]  # Conversation length


# Risk management team state
class RiskDebateState(TypedDict):
    risky_history: Annotated[
        str, "Risky Agent's Conversation history"
    ]  # Conversation history
    safe_history: Annotated[
        str, "Safe Agent's Conversation history"
    ]  # Conversation history
    neutral_history: Annotated[
        str, "Neutral Agent's Conversation history"
    ]  # Conversation history
    history: Annotated[str, "Conversation history"]  # Conversation history
    latest_speaker: Annotated[str, "Analyst that spoke last"]
    current_risky_response: Annotated[
        str, "Latest response by the risky analyst"
    ]  # Last response
    current_safe_response: Annotated[
        str, "Latest response by the safe analyst"
    ]  # Last response
    current_neutral_response: Annotated[
        str, "Latest response by the neutral analyst"
    ]  # Last response
    judge_decision: Annotated[str, "Judge's decision"]
    count: Annotated[int, "Length of the current conversation"]  # Conversation length
    recommended_quantity: Annotated[int, "Quantity the judge recommends trading"]
    reference_price: Annotated[float, "Reference price used for position sizing"]


class AccountState(TypedDict, total=False):
    cash_balance: Annotated[float, "Available cash balance for trading"]
    positions: Annotated[
        dict,
        "Holdings by ticker: {ticker: {'shares': int, 'avg_cost': float}}",
    ]
    max_allocation_pct: Annotated[
        float,
        "Maximum fraction of available cash to deploy on a single trade (0-1)",
    ]
    min_cash_reserve: Annotated[float, "Minimum cash reserve to maintain"]
    # 移除 last_close_price: 在批量多股票场景下，每次实时获取当前股票价格
    # 移除 current_position: 改为 positions 字典支持多品种持仓


class RecommendedTrade(TypedDict, total=False):
    action: Annotated[str, "Normalized BUY/SELL/HOLD action"]
    quantity: Annotated[int, "Recommended quantity in shares"]
    reference_price: Annotated[float, "Price assumption for the recommendation"]
    cash_balance: Annotated[float, "Cash balance considered for sizing"]
    allocation_pct: Annotated[float, "Allocation percentage applied"]
    min_cash_reserve: Annotated[float, "Cash held back as reserve"]
    trade_value: Annotated[float, "Notional value of the recommended trade"]


class AgentState(MessagesState):
    company_of_interest: Annotated[str, "Company that we are interested in trading"]
    trade_date: Annotated[str, "What date we are trading at"]

    sender: Annotated[str, "Agent that sent this message"]

    # research step
    market_report: Annotated[str, "Report from the Market Analyst"]
    sentiment_report: Annotated[str, "Report from the Social Media Analyst"]
    news_report: Annotated[
        str, "Report from the News Researcher of current world affairs"
    ]
    fundamentals_report: Annotated[str, "Report from the Fundamentals Researcher"]

    # researcher team discussion step
    investment_debate_state: Annotated[
        InvestDebateState, "Current state of the debate on if to invest or not"
    ]
    investment_plan: Annotated[str, "Plan generated by the Analyst"]

    trader_investment_plan: Annotated[str, "Plan generated by the Trader"]

    # risk management team discussion step
    risk_debate_state: Annotated[
        RiskDebateState, "Current state of the debate on evaluating risk"
    ]
    account_state: Annotated[AccountState, "Snapshot of account cash and positions"]
    final_trade_decision: Annotated[str, "Final decision made by the Risk Analysts"]
    processed_trade_decision: Annotated[
        str, "Structured BUY/SELL/HOLD decision extracted from the final trade decision"
    ]
    trade_signals: Annotated[
        list, "Structured trade signals generated by the workflow"
    ]
    recommended_trade: Annotated[
        RecommendedTrade,
        "Structured trade recommendation with sizing details",
    ]
